// App.tsx
import React, { useState, useEffect } from 'react';
import { View, StyleSheet, StatusBar, useColorScheme } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import SplashScreen from './screens/SplashScreen';
import LoginScreen from './screens/LoginScreen';
import ChatScreen from './screens/ChatScreen';
import SettingsScreen from './screens/SettingsScreen';
import Toast from 'react-native-toast-message';
import { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context';


// Define the possible screen types and theme types
type ScreenType = 'splash' | 'login' | 'chat' | 'settings';
type ThemeType = 'light' | 'dark';

// Define the structure for the user profile data
interface UserProfile {
Â  _id: string;
Â  name: string;
Â  email: string;
Â  contact: string;
Â  grade: string;
Â  entity_info: {
Â  Â  _id: string;
Â  Â  name: string;
Â  };
}
 

// Define color palettes for themes
const lightTheme = {
Â  background: '#F3F4F6', // light-gray-100
Â  text: '#151515ff',
  secondarytext:'#4e4d4dff', // dark-gray-800
Â  primary: '#3B82F6', // blue-500
Â  card: '#ecedeeff', // white
  secondary:'#dfe7f5ff', 
  secondaryaction: '#e5e8ebff',
};

const darkTheme = {
Â  background: '#151515ff', // dark-gray-800
Â  text: '#F3F4F6',
  secondarytext:'#e5e6e7ff', // light-gray-100
Â  primary: '#3B82F6', // blue-500
Â  card: '#232424ff', // dark-gray-700
  secondary:'#393a3bff',
  secondaryaction:'#393a3bff'
};

const App: React.FC = () => {
Â  const colorScheme = useColorScheme();
Â  const [currentScreen, setCurrentScreen] = useState<ScreenType>('splash');
Â  const [school, setSchool] = useState<string>('');
Â  const [username, setUsername] = useState<string>('');
Â  const [password, setPassword] = useState<string>('');
Â  const [loginError, setLoginError] = useState<string>('');
Â  const [isSidebarOpen, setIsSidebarOpen] = useState<boolean>(false);
Â  const [theme, setTheme] = useState<ThemeType>(colorScheme === 'dark' ? 'dark' : 'light');
Â  const [accessToken, setAccessToken] = useState<string | null>(null);
Â  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);

Â  // Check for saved access token and user profile on app start
Â  useEffect(() => {
Â  Â  const loadSettings = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const [token, savedTheme, savedUserProfile] = await Promise.all([
Â  Â  Â  Â  Â  AsyncStorage.getItem('accessToken'),
Â  Â  Â  Â  Â  AsyncStorage.getItem('app_theme'),
Â  Â  Â  Â  Â  AsyncStorage.getItem('userProfile'),
Â  Â  Â  Â  ]);

Â  Â  Â  Â  if (savedTheme === 'light' || savedTheme === 'dark') {
Â  Â  Â  Â  Â  setTheme(savedTheme as ThemeType);
Â  Â  Â  Â  }

Â  Â  Â  Â  if (token && savedUserProfile) {
Â  Â  Â  Â  Â  setAccessToken(token);
Â  Â  Â  Â  Â  setUserProfile(JSON.parse(savedUserProfile));
Â  Â  Â  Â  Â  setCurrentScreen('chat');
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  setCurrentScreen('login');
Â  Â  Â  Â  }
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Failed to load settings:', error);
Â  Â  Â  Â  setCurrentScreen('login');
Â  Â  Â  }
Â  Â  };

Â  Â  const timer = setTimeout(loadSettings, 2000); // splash delay
Â  Â  return () => clearTimeout(timer);
Â  }, []);

Â  // The handleLogin function now also retrieves and sets the user profile
Â  const handleLogin = async (token: string) => {
Â  Â  try {
Â  Â  Â  const savedUserProfile = await AsyncStorage.getItem('userProfile');
Â  Â  Â  if (savedUserProfile) {
Â  Â  Â  Â  setUserProfile(JSON.parse(savedUserProfile));
Â  Â  Â  Â  setAccessToken(token);
Â  Â  Â  Â  setCurrentScreen('chat');
Â  Â  Â  } else {
Â  Â  Â  Â  console.error('User profile not found after successful login.');
Â  Â  Â  Â  setLoginError('User profile not found. Please try again.');
Â  Â  Â  Â  setAccessToken(null);
Â  Â  Â  }
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to load user profile after login:', error);
Â  Â  Â  setLoginError('An error occurred during login. Please try again.');
Â  Â  }
Â  };

Â  const handleSignOut = async () => {
Â  Â  try {
Â  Â  Â  await AsyncStorage.removeItem('accessToken');
Â  Â  Â  await AsyncStorage.removeItem('userProfile');
Â  Â  Â  setAccessToken(null);
Â  Â  Â  setCurrentScreen('login');
Â  Â  Â  setSchool('');
Â  Â  Â  setUsername('');
Â  Â  Â  setPassword('');
Â  Â  Â  setUserProfile(null);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to remove token:', error);
Â  Â  Â  Toast.show({
Â  Â  Â  Â  type: 'error',
Â  Â  Â  Â  text1: 'Error signing out',
Â  Â  Â  Â  text2: 'Please restart the app.',
Â  Â  Â  });
Â  Â  }
Â  };

Â  const handleBackToChatWithSidebar = () => {
Â  Â  setCurrentScreen('chat');
Â  Â  setIsSidebarOpen(true);
Â  };

Â  const handleSetTheme = async (newTheme: ThemeType) => {
Â  Â  try {
Â  Â  Â  await AsyncStorage.setItem('app_theme', newTheme);
Â  Â  Â  setTheme(newTheme);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Failed to save theme:', error);
Â  Â  }
Â  };

Â  const renderScreen = () => {
Â  Â  const currentTheme = theme === 'light' ? lightTheme : darkTheme;

Â  Â  switch (currentScreen) {
Â  Â  Â  case 'splash':
Â  Â  Â  Â  return <SplashScreen theme={currentTheme} />;
Â  Â  Â  case 'login':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <LoginScreen
Â  Â  Â  Â  Â  Â  onLogin={handleLogin}
Â  Â  Â  Â  Â  Â  school={school}
Â  Â  Â  Â  Â  Â  setSchool={setSchool}
Â  Â  Â  Â  Â  Â  username={username}
Â  Â  Â  Â  Â  Â  setUsername={setUsername}
Â  Â  Â  Â  Â  Â  password={password}
Â  Â  Â  Â  Â  Â  setPassword={setPassword}
Â  Â  Â  Â  Â  Â  loginError={loginError}
Â  Â  Â  Â  Â  Â  setLoginError={setLoginError}
Â  Â  Â  Â  Â  Â  theme={theme}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  );
Â  Â  Â  case 'chat':
Â  Â  Â  Â  if (accessToken && userProfile) {
Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  <ChatScreen
Â  Â  Â  Â  Â  Â  Â  theme={currentTheme}
Â  Â  Â  Â  Â  Â  Â  isSidebarOpen={isSidebarOpen}
Â  Â  Â  Â  Â  Â  Â  setIsSidebarOpen={setIsSidebarOpen}
Â  Â  Â  Â  Â  Â  Â  setCurrentScreen={setCurrentScreen}
Â  Â  Â  Â  Â  Â  Â  accessToken={accessToken}
Â  Â  Â  Â  Â  Â  Â  userProfile={userProfile}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  );
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  return null; // Don't render chat screen without a token or user profile
Â  Â  Â  Â  }
Â  Â  Â  case 'settings':
Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  <SettingsScreen
Â  Â  Â  Â  Â  Â  theme={currentTheme}
Â  Â  Â  Â  Â  Â  currentTheme={theme}
Â  Â  Â  Â  Â  Â  setTheme={handleSetTheme}
Â  Â  Â  Â  Â  Â  onBack={handleBackToChatWithSidebar}
Â  Â  Â  Â  Â  Â  onSignOut={handleSignOut}
Â  Â  Â  Â  Â  Â  accessToken={accessToken}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  );
Â  Â  Â  default:
Â  Â  Â  Â  return null;
Â  Â  }
Â  };

Â    return (
    <SafeAreaProvider>
      <StatusBar 
        barStyle={theme === 'light' ? 'dark-content' : 'light-content'} 
        backgroundColor={theme === 'light' ? lightTheme.background : darkTheme.background}
      />
      <SafeAreaView
        style={[
          styles.safeArea,
          { backgroundColor: theme === 'light' ? lightTheme.background : darkTheme.background }
        ]}
         edges={['top']} // ðŸ‘ˆ control which sides to apply safe area padding
      >
        <View style={styles.contentContainer}>
          {renderScreen()}
        </View>
        <Toast />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  
  safeArea: {
    flex: 1,
  },
  contentContainer: {
    flex: 1,
  },
});

export default App;
